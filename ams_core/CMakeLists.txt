set(COMPONENT_NAME core)

if(AMS_ENABLE_BOOST)
find_package(Boost 1.75 REQUIRED)
endif()
find_package(gcem REQUIRED)

#add_subdirectory(third_party)

file(GLOB_RECURSE ${COMPONENT_NAME}_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
file(GLOB_RECURSE ${COMPONENT_NAME}_PUBLIC_MODULES "${CMAKE_CURRENT_SOURCE_DIR}/public/*.cppm")
file(GLOB_RECURSE ${COMPONENT_NAME}_PRIVATE_MODULES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cxx")
file(GLOB_RECURSE ${COMPONENT_NAME}_HEADER_UNITS "${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp")
file(GLOB_RECURSE ${COMPONENT_NAME}_INCLUDES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")

ams_log(VERBOSE "${COMPONENT_NAME} sources: ${${COMPONENT_NAME}_SOURCES}")
ams_log(VERBOSE "${COMPONENT_NAME} includes: ${${COMPONENT_NAME}_INCLUDES}")
ams_log(VERBOSE "${COMPONENT_NAME} public modules: ${${COMPONENT_NAME}_PUBLIC_MODULES}")
ams_log(VERBOSE "${COMPONENT_NAME} private modules: ${${COMPONENT_NAME}_PRIVATE_MODULES}")
ams_log(VERBOSE "${COMPONENT_NAME} header units: ${${COMPONENT_NAME}_HEADER_UNITS}")

## Create library
add_library(${COMPONENT_NAME} STATIC
  ${${COMPONENT_NAME}_SOURCES}
  ${${COMPONENT_NAME}_PRIVATE_MODULES}
)
add_library(${PROJECT_NAME}::${COMPONENT_NAME} ALIAS ${COMPONENT_NAME})
set_target_properties(${COMPONENT_NAME} PROPERTIES
  LINKER_LANGUAGE CXX
  VERSION ${${PROJECT_NAME}_VERSION}
)
target_link_libraries(${COMPONENT_NAME} PUBLIC
  gcem
)
if (AMS_ENABLE_BOOST)
  target_link_libraries(${COMPONENT_NAME} PUBLIC Boost::boost)
  target_compile_definitions(${COMPONENT_NAME} PUBLIC AMS_ENABLE_BOOST)
endif()

# api export header
string(TOUPPER ${PROJECT_NAME}_${COMPONENT_NAME} API_MACRO_NAME)
GENERATE_EXPORT_HEADER(${COMPONENT_NAME}
  BASE_NAME ${COMPONENT_NAME}
  EXPORT_MACRO_NAME ${API_MACRO_NAME}_EXPORT
  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/include/ams/${PROJECT_NAME}_${COMPONENT_NAME}_export.h
  STATIC_DEFINE SHARED_EXPORTS_BUILT_AS_STATIC
)
list(APPEND ${COMPONENT_NAME}_INCLUDES "${CMAKE_CURRENT_BINARY_DIR}/include/ams/${PROJECT_NAME}_${COMPONENT_NAME}_export.h")

#module_sources(${COMPONENT_NAME}
#  INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
#  INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_BINARY_DIR}/include"
#  PUBLIC_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/public" "${CMAKE_CURRENT_SOURCE_DIR}/include"
#  PRIVATE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/src"
#  HEADERS ${${COMPONENT_NAME}_INCLUDES}
#  HEADER_UNITS ${${COMPONENT_NAME}_HEADER_UNITS}
#  PUBLIC_MODULES ${${COMPONENT_NAME}_PUBLIC_MODULES}
#  PRIVATE_MODULES ${${COMPONENT_NAME}_PRIVATE_MODULES})
set(${COMPONENT_NAME}_MSBUILD_MODULES FALSE)
if(CMAKE_GENERATOR MATCHES "Visual Studio .. 20..")
  set(${COMPONENT_NAME}_MSBUILD_MODULES TRUE)
endif()

module_sources(${COMPONENT_NAME}
  NAME_PREFIX ${PROJECT_NAME}_
  INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
  INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    "${CMAKE_CURRENT_BINARY_DIR}/include"
  PUBLIC_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/public"
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
  PRIVATE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/src"
  HEADERS ${${COMPONENT_NAME}_INCLUDES}
  HEADER_UNITS ${${COMPONENT_NAME}_HEADER_UNITS}
  PUBLIC_MODULES ${${COMPONENT_NAME}_PUBLIC_MODULES}
  PRIVATE_MODULES ${${COMPONENT_NAME}_PRIVATE_MODULES}
  MSBUILD ${${COMPONENT_NAME}_MSBUILD_MODULES})


target_include_directories(${COMPONENT_NAME}
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

if (AMS_ENABLE_MODULES)
  if(GNU OR CLANG)
    if(AMS_COMPILER_VERSION LESS 12)
      target_compile_options(${COMPONENT_NAME} PUBLIC -fmodules-ts)
      message(STATUS "Using -fmodules-ts")
    endif()
  endif()
endif()


#### INSTALLATION ####
install_arguments_builder(VAR ${COMPONENT_NAME}_installer
  TARGETS ${COMPONENT_NAME} EXPORT ${COMPONENT_NAME}-targets
    COMPONENT ${COMPONENT_NAME}
  TARGET_TYPES
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install_arguments_builder(VAR ${COMPONENT_NAME}_installer
  INSTALL_FILE_SET TRUE
    FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_HEADERS
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install_arguments_builder(VAR ${COMPONENT_NAME}_installer
  INSTALL_FILE_SET TRUE
    FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PUBLIC_MODULES
    DESTINATION "${CMAKE_INSTALL_PREFIX}/public")
install_arguments_builder(VAR ${COMPONENT_NAME}_installer
  INSTALL_FILE_SET TRUE
    FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PRIVATE_MODULES
    DESTINATION "${CMAKE_INSTALL_PREFIX}/src")

install_arguments_builder(VAR ${COMPONENT_NAME}_installer INSTALL)
install(${${COMPONENT_NAME}_installer})

# install(TARGETS ${COMPONENT_NAME} EXPORT ${COMPONENT_NAME}-targets
#   COMPONENT ${COMPONENT_NAME}
#   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
#   INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
#   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
#   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
#   PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
#   FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_HEADERS DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
#   FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PUBLIC_MODULES DESTINATION "${CMAKE_INSTALL_PREFIX}/public"
#   FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PRIVATE_MODULES DESTINATION "${CMAKE_INSTALL_PREFIX}/src"
# )
install(EXPORT ${COMPONENT_NAME}-targets
  FILE ${PROJECT_NAME}-${COMPONENT_NAME}-targets.cmake
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  COMPONENT ${COMPONENT_NAME}
)
#install(FILES ${${COMPONENT_NAME}_PUBLIC_MODULES}
#  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/modules/${PROJECT_NAME}")
install(FILES ${${COMPONENT_NAME}_INCLUDES}
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")

