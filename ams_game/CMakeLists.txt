set(COMPONENT_NAME game)

find_package(OpenGL REQUIRED)
find_package(assimp CONFIG REQUIRED)


if (ENABLE_MODULES)
  file(GLOB_RECURSE ${COMPONENT_NAME}_INCLUDES
    ${CMAKE_CURRENT_SOURCE_DIR}/include/ams/*.cppm
    )
else()
  file(GLOB_RECURSE ${COMPONENT_NAME}_INCLUDES
    ${CMAKE_CURRENT_SOURCE_DIR}/include/ams/*.hpp
    )
endif()
file(GLOB_RECURSE ${COMPONENT_NAME}_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
)


## Create library
add_library(game
  ${${COMPONENT_NAME}_INCLUDES}
  ${${COMPONENT_NAME}_SOURCES}
)
add_library(${PROJECT_NAME}::${COMPONENT_NAME} ALIAS ${COMPONENT_NAME})
set_target_properties(${COMPONENT_NAME}
  PROPERTIES
  LINKER_LANGUAGE CXX
  VERSION ${${PROJECT_NAME}_VERSION}
)
# api export header
string(TOUPPER ${PROJECT_NAME}_${COMPONENT_NAME} API_MACRO_NAME)
GENERATE_EXPORT_HEADER(${COMPONENT_NAME}
  BASE_NAME ${COMPONENT_NAME}
  EXPORT_MACRO_NAME ${API_MACRO_NAME}_EXPORT
  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}_${COMPONENT_NAME}_export.hpp
  STATIC_DEFINE SHARED_EXPORTS_BUILT_AS_STATIC
)
# include headers as interface
target_include_directories(${COMPONENT_NAME}
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
  $<INSTALL_INTERFACE:include>
)
target_compile_definitions(${COMPONENT_NAME} PUBLIC
  "AMS_CXX_STANDARD=${CMAKE_CXX_STANDARD}"
  "AMS_OS_${AMS_OS}"
  "AMS_OS_VERSION=\"${AMS_OS_VERSION}\""
  "AMS_COMPILER_${AMS_COMPILER}"
  "AMS_COMPILER_VERSION=\"${AMS_COMPILER_VERSION}\""
  "AMS_ARCH_${AMS_ARCH}"
  "AMS_LIBRARY_VERSION=${AMS_LIBRARY_VERSION}"
  "GLFW_DLL"
)

add_subdirectory(third_party)

target_link_libraries(${COMPONENT_NAME}
  PUBLIC
    core
    spatial
    OpenGL::GL
    glfw
  PRIVATE
    assimp::assimp
)

#### INSTALLATION ####

install(TARGETS ${COMPONENT_NAME} EXPORT ${COMPONENT_NAME}-targets
  COMPONENT ${COMPONENT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(EXPORT ${COMPONENT_NAME}-targets
  FILE ${PROJECT_NAME}-${COMPONENT_NAME}-targets.cmake
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  COMPONENT ${COMPONENT_NAME}
)

install(FILES ${${COMPONENT_NAME}_INCLUDES}
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")
