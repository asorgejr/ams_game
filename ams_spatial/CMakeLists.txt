set(COMPONENT_NAME spatial)

find_package(glm CONFIG REQUIRED)

file(GLOB_RECURSE ${COMPONENT_NAME}_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
file(GLOB_RECURSE ${COMPONENT_NAME}_PUBLIC_MODULES "${CMAKE_CURRENT_SOURCE_DIR}/public/*.cppm")
file(GLOB_RECURSE ${COMPONENT_NAME}_PRIVATE_MODULES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cxx")
file(GLOB_RECURSE ${COMPONENT_NAME}_HEADER_UNITS "${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp")
file(GLOB_RECURSE ${COMPONENT_NAME}_INCLUDES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")

## Create library
add_library(${COMPONENT_NAME} STATIC
  ${${COMPONENT_NAME}_SOURCES}
  ${${COMPONENT_NAME}_PRIVATE_MODULES}
)
add_library(${PROJECT_NAME}::${COMPONENT_NAME} ALIAS ${COMPONENT_NAME})
set_target_properties(${COMPONENT_NAME}
  PROPERTIES
    LINKER_LANGUAGE CXX
    VERSION ${${PROJECT_NAME}_VERSION}
)

# api export header
string(TOUPPER ${PROJECT_NAME}_${COMPONENT_NAME} API_MACRO_NAME)
GENERATE_EXPORT_HEADER(${COMPONENT_NAME}
  BASE_NAME ${COMPONENT_NAME}
  EXPORT_MACRO_NAME ${API_MACRO_NAME}_EXPORT
  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/include/ams/${PROJECT_NAME}_${COMPONENT_NAME}_export.h
  STATIC_DEFINE SHARED_EXPORTS_BUILT_AS_STATIC
)
list(APPEND ${COMPONENT_NAME}_INCLUDES "${CMAKE_CURRENT_BINARY_DIR}/include/ams/${PROJECT_NAME}_${COMPONENT_NAME}_export.h")

module_sources(${COMPONENT_NAME}
  NAME_PREFIX ${PROJECT_NAME}_
  INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
  INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    "${CMAKE_CURRENT_BINARY_DIR}/include"
  HEADERS ${${COMPONENT_NAME}_INCLUDES})

if(CMAKE_GENERATOR MATCHES "Visual Studio .. 20..")
  files_to_interface(VAR ${COMPONENT_NAME}_MODULES
    BASE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/public"
    INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}"
    FILES ${${COMPONENT_NAME}_MODULES})
  target_sources(${COMPONENT_NAME} PUBLIC
     ${${COMPONENT_NAME}_MODULES}
  )
else()
  module_sources(${COMPONENT_NAME}
    NAME_PREFIX ${PROJECT_NAME}_
    INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
    PUBLIC_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/public"
    PRIVATE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/src"
    PUBLIC_MODULES ${${COMPONENT_NAME}_PUBLIC_MODULES}
    PRIVATE_MODULES ${${COMPONENT_NAME}_PRIVATE_MODULES})
endif()

# include headers as interface
target_include_directories(${COMPONENT_NAME}
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

target_compile_definitions(${COMPONENT_NAME}
  PUBLIC
    AMS_VEC_SWIZZLE_METHODS
)
if(AMS_EXCEPTIONS)
  target_compile_definitions(${COMPONENT_NAME}
    PUBLIC
      AMS_EXCEPTIONS
  )
endif()
target_link_libraries(${COMPONENT_NAME}
  PUBLIC
    core
    glm::glm
)
target_link_options(${COMPONENT_NAME}
  PUBLIC
    $<$<CXX_COMPILER_ID:GNU>:-Wl,--no-undefined>
    $<$<CXX_COMPILER_ID:Clang>:-Wl,-undefined,error>
)


#### INSTALLATION ####
install(TARGETS ${COMPONENT_NAME} EXPORT ${COMPONENT_NAME}-targets
  COMPONENT ${COMPONENT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_HEADERS DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
  FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PUBLIC_MODULES DESTINATION "${CMAKE_INSTALL_PREFIX}/public"
  FILE_SET ${PROJECT_NAME}_${COMPONENT_NAME}_PRIVATE_MODULES DESTINATION "${CMAKE_INSTALL_PREFIX}/src"
)
install(EXPORT ${COMPONENT_NAME}-targets
  FILE ${PROJECT_NAME}-${COMPONENT_NAME}-targets.cmake
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  COMPONENT ${COMPONENT_NAME}
)

#install(FILES ${${COMPONENT_NAME}_MODULES}
#  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/modules/${PROJECT_NAME}")
#install(FILES ${${COMPONENT_NAME}_INCLUDES}
#  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")
